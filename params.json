{"name":"CC_Checker","tagline":"","body":"# CC_Checker\r\n==========\r\nCC_Checker cracks credit card hashes with PowerShell.\r\n\r\nCC_Checker.ps1\r\n\tBrute Forces the digits of a luhn valid CC number, then hashes and checks it against the hash\r\n\r\n\tInput File Format - 4321??????1234:HASH\r\n\tUse ? for the digits that are unknown\r\n\r\n### Usage: \r\nCC_Checker.ps1 -i INPUT_FILE -o OUTPUT_FILE -h HASH_TYPE [1-3]\r\n\t\t\t\r\n* 1 = SHA1\r\n* 2 = SHA256\r\n* 3 = MD5\r\n\r\n## Requirements:\r\n###  \t* Preferred:\r\n* \t\t-First 6, Last 4, and hash of CC number\r\n* \t\t\t-File format:  123456??????1234:HASH\r\n* \t-Last 4 or missing first 4 (or more)\r\n* \t\t - A list of common IINs will be used to cut down on the guessing space\r\n\r\n###  \t\t * Worst Case:\r\n* \t\t \t- ????????????????:HASH\r\n* \t\t \t- Brute force all digits\r\n* \t\t \t- This will be reduced by looking up the IINs and using them\r\n* \t\t \t\t-If you are using this use case, then change the file name on line 349\r\n\r\n###  \t-Also Powershell, but that should be obvious\r\n\r\n\r\n\t\r\n\t\r\nWritten by Karl Fosaaen\r\n\r\nTwitter: @kfosaaen","google":"UA-5058747-1","note":"Don't delete this file! It's used internally to help with page regeneration."}